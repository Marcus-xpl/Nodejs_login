


const fs = require('fs'); // M√≥dulo para manipula√ß√£o de arquivos
const readline = require('readline'); // M√≥dulo para ler entrada do usu√°rio no terminal

const ARQUIVO = 'usuarios.json'; // Nome do arquivo onde os usu√°rios ser√£o salvos

// Verifica se o arquivo existe; se n√£o existir, cria um arquivo vazio com um array vazio
if (!fs.existsSync(ARQUIVO)) {
  fs.writeFileSync(ARQUIVO, '[]');
}

// Fun√ß√£o para ler os usu√°rios do arquivo JSON
function lerUsuarios() {
  try {
    const data = fs.readFileSync(ARQUIVO, 'utf8'); // L√™ arquivo como texto
    return JSON.parse(data); // Converte texto JSON para array de usu√°rios
  } catch {
    return []; // Caso haja erro, retorna array vazio
  }
}

// Fun√ß√£o para salvar o array de usu√°rios no arquivo JSON
function salvarUsuarios(usuarios) {
  fs.writeFileSync(ARQUIVO, JSON.stringify(usuarios, null, 2)); // Converte array para JSON formatado e salva
}

// Configura√ß√£o do readline para entrada e sa√≠da padr√£o (terminal)
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
});

// Fun√ß√£o que retorna uma Promise para facilitar uso com async/await ao perguntar algo no terminal
function perguntar(question) {
  return new Promise(resolve => rl.question(question, resolve));
}

// Fun√ß√£o principal do menu em loop infinito para intera√ß√£o com o usu√°rio
async function menu() {
  while (true) {
    console.log('\n=================================');
    console.log('=== üíª Sistema de Usu√°rios üíª ===');
    console.log('=================================\n');

    console.log('1 - Cadastrar usu√°rio');
    console.log('2 - Fazer login');
    console.log('3 - Listar usu√°rios');
    console.log('4 - Deletar usu√°rio');
    console.log('0 - Sair');

    const option = await perguntar('\nEscolha uma op√ß√£o: ');

    switch (option) {
      case '1':
        await cadastrar(); // Chama fun√ß√£o para cadastro
        break;
      case '2':
        await login(); // Chama fun√ß√£o para login
        break;
      case '3':
        listarUsuarios(); // Lista todos os usu√°rios
        break;
      case '4':
        await deletarUsuario(); // Deleta um usu√°rio espec√≠fico
        break;
      case '0':
        console.log('\nüëã Encerrando o programa...');
        rl.close(); // Fecha interface readline
        process.exit(); // Encerra o programa Node.js
      default:
        console.log('\n‚ùå Op√ß√£o inv√°lida!');
    }
  }
}

// Fun√ß√£o para cadastrar novo usu√°rio
async function cadastrar() {
  const usuarios = lerUsuarios(); // L√™ lista atual de usu√°rios

  // Pergunta dados do usu√°rio
  const nomeCompleto = await perguntar('\nNome completo: ');
  const usuario = await perguntar('Nome de usu√°rio: ');

  // Valida√ß√£o b√°sica: nome de usu√°rio n√£o pode estar vazio nem ter espa√ßos
  if (!nomeCompleto || !usuario || usuario.includes(' ')) {
    console.log('\n‚ùå Erro! Nome completo pode conter espa√ßos mas o nome de usu√°rio n√£o.');
    return;
  }

  // Verifica se nome completo j√° existe (case insensitive)
  if (usuarios.find(u => u.nomeCompleto.toLowerCase() === nomeCompleto.toLowerCase())) {
    console.log('\n‚ùå J√° existe uma conta com esse Nome completo!');
    return;
  }

  // Verifica se nome de usu√°rio j√° existe
  if (usuarios.find(u => u.usuario === usuario)) {
    console.log('\n‚ùå Nome de usu√°rio j√° existe!');
    return;
  }

  // Valida√ß√£o do sexo, aceita apenas M ou F (case insensitive)
  let sexo;
  while (true) {
    sexo = await perguntar('Sexo (M/F): ');
    if (sexo.toUpperCase() === 'M' || sexo.toUpperCase() === 'F') {
      sexo = sexo.toUpperCase(); // Guarda sexo em mai√∫sculo
      break;
    }
    console.log('\n‚ùå Sexo inv√°lido! Digite apenas M ou F.');
  }

  // Valida√ß√£o da idade, aceita somente n√∫meros inteiros maiores que 9
  let idade;
  while (true) {
    const idadeStr = await perguntar('Idade: ');
    idade = parseInt(idadeStr);
    if (!isNaN(idade) && idade > 9) break;
    console.log('\n‚ùå Idade inv√°lida! Digite apenas n√∫meros inteiros maiores que 9.');
  }

  // Adiciona novo usu√°rio ao array e salva no arquivo
  usuarios.push({ nomeCompleto, usuario, sexo, idade });
  salvarUsuarios(usuarios);
  console.log('\n‚úÖ Usu√°rio cadastrado com sucesso!');
}

// Fun√ß√£o para login (apenas verifica se o usu√°rio existe)
async function login() {
  const usuarios = lerUsuarios();

  const usuario = await perguntar('Nome de usu√°rio: ');
  const user = usuarios.find(u => u.usuario === usuario);

  if (!user) {
    console.log('\n‚ùå Usu√°rio n√£o encontrado!');
    return;
  }

  console.log(`\n‚úÖ Login realizado com sucesso! Bem-vindo, ${user.nomeCompleto}!`);
}

// Fun√ß√£o para listar todos os usu√°rios cadastrados
function listarUsuarios() {
  const usuarios = lerUsuarios();
  if (usuarios.length === 0) {
    console.log('\nNenhum usu√°rio cadastrado.');
    return;
  }
  console.log('\n===================================');
  console.log('=== ‚≠ê Usu√°rios cadastrados ‚≠ê ====');
  console.log('===================================\n');

  usuarios.forEach((u, i) => {
    console.log(`${i + 1}. Nome completo: ${u.nomeCompleto}\n   Nome de usu√°rio: ${u.usuario}\n   Sexo: ${u.sexo} | Idade: ${u.idade}\n`);
  });
}

// Fun√ß√£o para deletar um usu√°rio pelo nome de usu√°rio
async function deletarUsuario() {
  const usuarios = lerUsuarios();

  const usuario = await perguntar('\nDigite o nome de usu√°rio que deseja deletar: ');
  const index = usuarios.findIndex(u => u.usuario === usuario);

  if (index === -1) {
    console.log('\n‚ùå Usu√°rio n√£o encontrado!');
    return;
  }

  usuarios.splice(index, 1); // Remove o usu√°rio do array
  salvarUsuarios(usuarios); // Salva altera√ß√£o no arquivo
  console.log(`\n‚úÖ Usu√°rio ${usuario} deletado com sucesso!`);
}

// Inicia o menu do sistema
menu();



